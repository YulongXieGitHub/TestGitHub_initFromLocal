July 11, 2015

YuLong Xie


Learning github from the Youtube Tutorial: "https://www.youtube.com/watch?v=Y9XZQO1n_7c"

----------------------------- exercise two: (1) create local folder, (2) initilize it as a repository (3) push back to github.com ---------------------------


Different from Repository "TestGitHub" which was created in github.com and then clone to local machine.
This time we initialize a repository in the local machine first and then push to the github.com

Step 1: Create a "TestGitHub_initFromLocal" first

Step 2: run [git bash]

Step 3: in git bach, switch to "TestGitHub_initFromLocal" folder

Step 4: [git init]

Step 5: [git status] 

we can use [git log] to see commits
	
Step 6: [git add .] to stage more than a single file	

for instance, this file is originally called "Test02.txt" and then renamed to "Test02.csv".

[git rm Test02.txt] removed the already staged "Test02.txt"

[git add .] stages [Test02.csv] and [Test03.csv]

create a [.gitignore] file to include the type of files which we want to ignore.


----------------------------- Testing Branch ------------------------
(1) "master" is always 


[git branch MyBranch] to create a branch (it seems like only those files having not been committed will be in the branch???

[git checkout MyBranch] to checkout and work on the branch


make some changes on the eisting file and create some new files when in "MyBranch".

Note that: those files created in the MyBranch cannot be seen (literally from Window Exploroer or from Textpad if it is a text file including this sentence) in MyBranch before merging)

if we switch back to the master barnch by [git checkout master], this writing and the files created during MyBranch will not be able to seen.


But if we switch back to MyBranch again with [git checkout MyBranch] we will see these writing and file names again!!!!

All the change made in MyBranch can only be preserved after merging the Branch to the Main Branch which is "master".

Before merging we need to make sure we are in the destination branch which is "master" for this case.

Before merge, we need to be in the destination branch which is [master] for this case:
[git checkout master]

then merge with the source which is [MyBranch] at this case.
[git merge MyBranch]

--------------- to make and then solve a conflict ------------
[git -a -m '###'] to to have the stage and commit steps into a single step

(1) change "Test02.csv" file by adding "test conflict between "master (Change 4)" branch and "MyBranch (change 5)" by creating and resolving a conflict "

(2) [git commit -a -m "change in master"] in master branch to stage and commit the change made on "Test02.csv"

(3) [git checkout MyBranch] to switch to MyBranch branch

(4) change "Test02.csv" file by adding "ttest conflict between "master" branch (change 4) and "MyBranch" branch (change 5)"

(5) [git commit -a -m "change in master"] in MyBranch to stage and commit the change made on "Test02.csv"

(6) [git merge master] to merge source (master) to desitination (MyBranch): Merge the change made during master branch and during MyBranch

(7) Waring prompted to indicate conflict.
    In Textpad, you even can see the conflict  as follows:


	****************************************************************************************************************    
	<<<<<<< HEAD
	test conflict between "master (Change 4)" branch and "MyBranch (change 5)" by creating and resolving a conflict 
	=======
	test conflict between "master" branch (change 4) and "MyBranch" branch (change 5)
	>>>>>>> master
	****************************************************************************************************************    

(8) [git commit -a -m "merge from master"]: Manual resolve and the conflict and save the file, then re-stage and re-commit
	




------------------- end of this first exercise -------------------------
    
    